#!/usr/bin/env node --expose-gc --max-old-space-size=8192
/* ========================================================================= **
**                     ________________  _____ ____    __                    **
**                    / ____/ ____/ __ \/ ___// __ \  / /                    **
**                   / /   / /   / / / /\__ \/ / / / / /                     **
**                  / /___/ /___/ /_/ /___/ / /_/ / / /___                   **
**                  \____/\____/\____//____/\___\_\/_____/                   **
**                                                                           **
** ========================================================================= **
**                               MODEL SERVER                                **
** ========================================================================= **
** SQL-Based Cross-cooccurrence Recommender System                           **
** Copyright (C) Jonah H. Harris <jonah.harris@gmail.com>                    **
** All Rights Reserved.                                                      **
**                                                                           **
** Permission to use, copy, modify, and/or distribute this software for any  **
** purpose is subject to the terms specified in the License Agreement.       **
** ========================================================================= */

/* ========================================================================= */
/* -- INCLUSIONS ----------------------------------------------------------- */
/* ========================================================================= */

const CCOIndex = require('../lib/ccoindex.js');
const sqlite3 = require('better-sqlite3');
const fastify = require('fastify')({ logger: false });
const fs = require('fs');
const microtime = require('microtime');
const minimist = require('minimist');
const path = require('path');

function addEntity (db, entity) {
  const info = db.prepare(`
INSERT
  INTO cco_entities (entity)
VALUES (?)
`).run(entity);
  return info;
}

function recordEvent (db, entity, indicator, target) {
  const info = db.prepare(`
INSERT
  INTO cco_downsampled_events
       (entity_id, indicator_id, target_id)
SELECT e.entity_id,
       i.indicator_id,
       t.target_id
  FROM cco_entities e,
       cco_indicators i,
       cco_targets t
 WHERE e.entity = ?
       AND i.indicator = ?
       AND t.target = ?
`).run(entity, indicator, target);
  return info;
}

/* ========================================================================= */
/* == ACCESSOR ============================================================= */
/* ========================================================================= */

(async function main () {
  const argv = minimist(process.argv.slice(2));
  let invalidArgs = false;
  let requiredArgs = ['fts', 'sqlite', 'address', 'port'];
  Object.entries(requiredArgs).forEach(entry => {
    const [, arg] = entry;
    if (!(arg in argv)) {
      console.error('Argument ' + arg + ' is missing');
      invalidArgs = true;
    }
  });
  if (true === invalidArgs) {
    process.exit(1);
  }

  const dbOptions = {};
  const db = sqlite3(path.join(__dirname, '..', 'data', 'sqlite',
    argv.sqlite), dbOptions);

  const index = CCOIndex();

  console.log('loading index...');
  const fileName = path.join(__dirname, '..', 'data', 'fts', argv.fts);
  await index.load(fileName);
  console.log('done');

  fastify.get('/log/:entity', {
    schema: {
      query: {
        $id: 'log-parser',
        properties: {
          indicator: {
            type: 'string',
            default: null
          },
          target: {
            type: 'string',
            default: null
          }
        }
      }
    }
  }, async (request, reply) => {
    let entity = String(request.params.entity);
    if (null === request.query.indicator || null === request.query.target) {
      return false;
    }

    try {

        let info = recordEvent(db, entity, request.query.indicator,
          request.query.target);
        if (1 === info.changes) {
          return true;
        }

        /* Just going to go on a hunch and say this is just an invalid user. */
        if (0 === info.changes) {
          addEntity(db, entity);
          info = recordEvent(db, entity, request.query.indicator,
            request.query.target);
          if (1 === info.changes) {
            return true;
          }
        }
    } catch (e) {
      console.error(e);
    }

    return false;
  });

  fastify.get('/recommendation/:entity', {
    schema: {
      query: {
        $id: 'recommendation-parser',
        properties: {
          limit: {
            type: 'number',
            default: 20
          },
          normalized: {
            type: 'boolean',
            default: false
          }
        }
      }
    }
  }, async (request, reply) => {
    let entity = request.params.entity;

    /* Fetch indicators from CCO database and add as fields to index. */
    let row = db.prepare(`
WITH
user_history
AS (SELECT e.entity,
           i.indicator,
           json_group_array(t.target) AS json_targets
      FROM cco_downsampled_events ds
      JOIN cco_entities e
           ON (e.entity_id = ds.entity_id)
      JOIN cco_indicators i
           ON (i.indicator_id = ds.indicator_id)
      JOIN cco_targets t
           ON (t.target_id = ds.target_id)
     WHERE e.entity = ?
     GROUP BY 1, 2
   )
SELECT json_group_object(indicator, json(json_targets)) AS user_history_json
  FROM user_history
 GROUP BY entity;
  `).get(String(entity));
    if (row) {
      return index.search(JSON.parse(row.user_history_json),
        request.query.limit, request.query.normalized);
    } else {
      return [];
    }
  });

  /* Run HTTP */
  console.log('Running HTTP');
  fastify.listen(argv.port, argv.address, function (err, address) {
    if (err) {
      fastify.log.error(err)
      process.exit(1)
    }
  });
})();

