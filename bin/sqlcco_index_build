#!/usr/bin/env node --expose-gc --max-old-space-size=8192
/* ========================================================================= **
**                     ________________  _____ ____    __                    **
**                    / ____/ ____/ __ \/ ___// __ \  / /                    **
**                   / /   / /   / / / /\__ \/ / / / / /                     **
**                  / /___/ /___/ /_/ /___/ / /_/ / / /___                   **
**                  \____/\____/\____//____/\___\_\/_____/                   **
**                                                                           **
** ========================================================================= **
**                   RECOMMENDER-OPTIMIZED INVERTED INDEX                    **
** ========================================================================= **
** SQL-Based Cross-cooccurrence Recommender System                           **
** Copyright (C) Jonah H. Harris <jonah.harris@gmail.com>                    **
** All Rights Reserved.                                                      **
**                                                                           **
** Permission to use, copy, modify, and/or distribute this software for any  **
** purpose is subject to the terms specified in the License Agreement.       **
** ========================================================================= */

/* ========================================================================= */
/* -- INCLUSIONS ----------------------------------------------------------- */
/* ========================================================================= */

const CCOIndex = require('../lib/ccoindex.js');
const sqlite3 = require('better-sqlite3');
const fs = require('fs');
const microtime = require('microtime');
const minimist = require('minimist');
const path = require('path');

/* ========================================================================= */
/* == ACCESSOR ============================================================= */
/* ========================================================================= */

(async function main () {
  const argv = minimist(process.argv.slice(2));
  let invalidArgs = false;
  let requiredArgs = ['fts', 'sqlite'];
  Object.entries(requiredArgs).forEach(entry => {
    const [, arg] = entry;
    if (!(arg in argv)) {
      console.error('Argument ' + arg + ' is missing');
      invalidArgs = true;
    }
  });
  if (true === invalidArgs) {
    process.exit(1);
  }

  const dbOptions = {};
  const db = sqlite3(path.join(__dirname, '..', 'data', 'sqlite',
    argv.sqlite), dbOptions);

  const index = CCOIndex();

  /* Fetch indicators from CCO database and add as fields to index. */
  let stmt = db.prepare('SELECT indicator FROM cco_indicators');
  for (const row of stmt.iterate()) {
    index.addField(row.indicator);
  }

  let missing = 0;
  let counter = 0;
  /* Fetch item-item FTS entries from CCO database and add to index. */
  stmt = db.prepare(
    'SELECT target, cco_json FROM cco_materialized_fts_entries');
  for (const row of stmt.iterate()) {
    let doc = JSON.parse(row.cco_json);

    /* JHH FIX - Need to ensure 1:1 object creation in SQL */
/*
    if (!(Object.hasOwnProperty.call(doc, 'purchase'))) {
      ++missing;
      continue;
    }
*/

    doc.id = row.target;
    index.addDocument(doc);

    if (++counter % 1000 === 0) {
      console.log(`${counter} indexed...`);
    }
  }

  console.log(`${counter} indexed (${missing} without primary indicator)`);

  console.log('optimizing index...');
  index.optimize();
  console.log('done');

  const fileName = path.join(__dirname, '..', 'data', 'fts',
    'sqlcco.json.gz');
  console.log('saving index...');
  await index.save(fileName);
  console.log('done.');
})();
